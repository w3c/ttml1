<?xml version="1.0" encoding="UTF-8"?>
<!-- Apache Ant script to build spec. Philippe Le Hegaret, W3C -->

<project name="TimedText" default="generate" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">

  <path id="saxon8.classpath">
    <pathelement location="saxon8/saxon8.jar"/>
  </path>
  
  <property name="html.dir" value="${basedir}"/>
  <property name="html.name" value="ttml1.html"/>
  <property name="stylesheet" value="xmlspec-ttml1.xsl"/>

  <property name="jing.jar" value="${basedir}/jing/jing.jar"/>
  <property name="rnc.dir" value="${basedir}/rnc"/>
  <property name="rnc.schema" value="${rnc.dir}/ttml1.rnc"/>
  <property name="xsd.dir" value="${basedir}/xsd"/>
  <property name="xsd.schema" value="${xsd.dir}/ttml1.xsd"/>
  <property name="profiles.dir" value="${basedir}/profiles"/>
  <property name="examples.dir" value="${basedir}/examples"/>

  <property name="build.dir" value="${basedir}/build"/>

  <patternset id="escapable">
    <include name="examples/*.xml"/>
    <include name="profiles/*.xml"/>
  </patternset>

  <patternset id="escaped">
    <include name="examples/*.esc"/>
    <include name="profiles/*.esc"/>
  </patternset>

  <target name="clean-escapes" description="Clean escaped entites.">
    <delete quiet="true">
      <fileset dir="${basedir}">
        <patternset refid="escaped"/>
      </fileset>
    </delete>
  </target>

  <target name="clean" depends="clean-escapes">
    <delete quiet="true" file="${html.name}"/>
  </target>

  <target name="validate-schema-rnc" description="Validates DFXP's RNC Schema.">
    <java fork="true" jar="${jing.jar}" dir="${rnc.dir}">
      <arg value="-c"/>
      <arg value="ttml1.rnc"/>
    </java>
  </target>

  <target name="generate-schema-archive-rnc" description="Generate DFXP's RNC Schema archive." depends="validate-schema-rnc">
    <zip destfile="${rnc.dir}/schema.zip">
      <fileset dir="${rnc.dir}">
        <include name="*.rnc"/>
      </fileset>
    </zip>
  </target>

  <target name="create-xsd-bindings" description="Create JAXB Bindings for DFXP's XSD Schema.">
    <exec executable="xjc" dir="xsd">
      <arg value="-quiet"/>
      <arg value="-b"/>
      <arg value="ttml1-bindings.xjb"/>
      <arg value="ttml1.xsd"/>
    </exec>
  </target>

  <target name="delete-xsd-bindings" description="Delete JAXB Bindings for DFXP's XSD Schema.">
    <delete includeemptydirs="true">
      <fileset dir="xsd/org"/>
    </delete>
  </target>

  <target name="validate-schema-xsd" description="Validates DFXP's XSD Schema using JAXB tool set." depends="create-xsd-bindings, delete-xsd-bindings"/>

  <target name="generate-schema-archive-xsd" description="Generate DFXP's XSD Schema archive." depends="validate-schema-xsd">
    <zip destfile="${xsd.dir}/schema.zip">
      <fileset dir="${xsd.dir}">
        <include name="*.xsd"/>
      </fileset>
    </zip>
  </target>

  <target name="validate-schemas" description="Validate DFXP schemas" depends="validate-schema-rnc, validate-schema-xsd"/>

  <target name="generate-schema-archives" description="Generate DFXP schema archives" depends="generate-schema-archive-rnc, generate-schema-archive-xsd"/>

  <target name="validate-profile-transformation" description="Validates transformation profile.">
    <java fork="true" jar="${jing.jar}">
      <arg value="-c"/>
      <arg value="${rnc.schema}"/>
      <arg value="${profiles.dir}/dfxp-presentation.xml"/>
    </java>
  </target>

  <target name="validate-profile-presentation" description="Validates presentation profile.">
    <java fork="true" jar="${jing.jar}">
      <arg value="-c"/>
      <arg value="${rnc.schema}"/>
      <arg value="${profiles.dir}/dfxp-presentation.xml"/>
    </java>
  </target>

  <target name="validate-profile-full" description="Validates full profile.">
    <java fork="true" jar="${jing.jar}">
      <arg value="-c"/>
      <arg value="${rnc.schema}"/>
      <arg value="${profiles.dir}/dfxp-full.xml"/>
    </java>
  </target>

  <target name="validate-profiles"
	    depends="validate-profile-transformation,validate-profile-presentation,validate-profile-full"/>

  <target name="validate-example-1" description="Validates Example 1.">
    <!-- validate using RNC schema -->
    <java fork="true" jar="${jing.jar}">
      <arg value="-c"/>
      <arg value="${rnc.schema}"/>
      <arg value="${examples.dir}/ex1.xml"/>
    </java>
    <!-- validate using XSD schema -->
    <schemavalidate fullchecking="true" warn="true">
      <schema namespace="http://www.w3.org/ns/ttml" file="${xsd.schema}"/>
      <fileset dir="${examples.dir}">
        <include name="ex3.xml"/>
      </fileset>
    </schemavalidate>
  </target>

  <target name="validate-example-2" description="Validates Example 2.">
    <!-- validate using RNC schema -->
    <java fork="true" jar="${jing.jar}">
      <arg value="-c"/>
      <arg value="${rnc.schema}"/>
      <arg value="${examples.dir}/ex2-paint-on.xml"/>
    </java>
    <java fork="true" jar="${jing.jar}">
      <arg value="-c"/>
      <arg value="${rnc.schema}"/>
      <arg value="${examples.dir}/ex2-pop-on.xml"/>
    </java>
    <java fork="true" jar="${jing.jar}">
      <arg value="-c"/>
      <arg value="${rnc.schema}"/>
      <arg value="${examples.dir}/ex2-roll-up.xml"/>
    </java>
    <!-- validate using XSD schema -->
    <schemavalidate fullchecking="true" warn="true">
      <schema namespace="http://www.w3.org/ns/ttml" file="${xsd.schema}"/>
      <fileset dir="${examples.dir}">
        <include name="ex2-paint-on.xml"/>
        <include name="ex2-pop-on.xml"/>
        <include name="ex2-roll-up.xml"/>
      </fileset>
    </schemavalidate>
  </target>

  <target name="validate-example-3" description="Validates Example 3.">
    <!-- validate using RNC schema -->
    <java fork="true" jar="${jing.jar}">
      <arg value="-c"/>
      <arg value="${rnc.schema}"/>
      <arg value="${examples.dir}/ex3-all-elements.xml"/>
    </java>
    <java fork="true" jar="${jing.jar}">
      <arg value="-c"/>
      <arg value="${rnc.schema}"/>
      <arg value="${examples.dir}/ex3-all-styles.xml"/>
    </java>
    <!-- validate using XSD schema -->
    <schemavalidate fullchecking="true" warn="true">
      <schema namespace="http://www.w3.org/ns/ttml" file="${xsd.schema}"/>
      <fileset dir="${examples.dir}">
        <include name="ex3-all-elements.xml"/>
        <include name="ex3-all-styles.xml"/>
      </fileset>
    </schemavalidate>
  </target>

  <target name="validate-examples"
	    depends="validate-example-1, validate-example-2, validate-example-3"/>

  <target name="validate-xsl" description="Validates all XML files.">
    <xmlvalidate lenient="true">
      <fileset dir="." includes="*.xsl"/>
    </xmlvalidate>
  </target>

  <target name="validate-svg" description="Validates all SVG files.">
    <xmlvalidate lenient="false" warn="yes">
      <fileset dir="." includes="*.svg"/>
    </xmlvalidate>
  </target>

  <target name="build-escapes" description="Generate escaped entites.">
    <apply executable="sed">
      <arg value="-f"/>
      <arg value="escape.sed"/>
      <fileset dir="${basedir}">
        <patternset refid="escapable"/>
      </fileset>
      <redirector>
        <outputmapper>
          <mapper type="glob" from="*" to="*.esc"/>
        </outputmapper>
      </redirector>
    </apply>
  </target>

  <target name="validate-tt-specs" description="Validates all Timed Text spec files."
        depends="build-escapes">
    <xmlvalidate lenient="false" warn="yes" file="ttml1.xml"/>
  </target>

  <target name="validate-tt-specs-dont-build-escapes" description="Validates all Timed Text spec files.">
    <xmlvalidate lenient="false" warn="yes" file="ttml1.xml"/>
  </target>

  <target name="validate" depends="validate-schemas,validate-examples,validate-xsl,validate-svg,validate-tt-specs,validate-schema-rnc,validate-profiles"/>

  <target name="html" description="Transforms xml into html.">
    <echo>Generating ttml1.html</echo>
    <java fork="true" classname="net.sf.saxon.Transform">
      <classpath refid="saxon8.classpath"/>
      <arg value="-o"/>
      <arg value="${html.dir}/${html.name}"/>
      <arg value="ttml1.xml"/>
      <arg value="${stylesheet}"/>
      <arg value="showAssertions=true"/>
    </java>    
  </target>

  <target name="kwexpand" description="Expands keywords present in the html specification.">
    <echo message="Expanding keywords."/>
    <exec executable="git" resultproperty="ttml1.diff" failonerror="false">
      <arg value="diff"/>
      <arg value="--quiet"/>
      <arg value="ttml1.xml"/>
    </exec>
    <condition property="ttml1.dirty">
      <equals arg1="${ttml1.diff}" arg2="1"/>
    </condition>
    <echo message="Warning ttml1.xml has uncommitted modifications." if:set="ttml1.dirty"/>
    <tstamp>
      <format property="today.mm" pattern="MM"/>
    </tstamp>
    <tstamp>
      <format property="today.month" pattern="MMMM"/>
    </tstamp>
    <tstamp>
      <format property="today.dd" pattern="dd"/>
    </tstamp>
    <tstamp>
      <format property="today.day" pattern="EEEE"/>
    </tstamp>
    <tstamp>
      <format property="today.year" pattern="yyyy"/>
    </tstamp>
    <exec executable="git" outputproperty="dateHash" failonerror="false">
      <arg value="log"/>
      <arg value="--quiet"/>
      <arg value="-1"/>
      <arg value="--oneline"/>
    </exec>
    <replace file="${html.dir}/${html.name}" token="$Date$" value="${dateHash}"/>
    <replace file="${html.dir}/${html.name}" token="$dateMM$" value="${today.mm}"/>
    <replace file="${html.dir}/${html.name}" token="$dateMonth$" value="${today.month}"/>
    <replace file="${html.dir}/${html.name}" token="$dateDD$" value="${today.dd}"/>
    <replace file="${html.dir}/${html.name}" token="$dateDay$" value="${today.dd}"/>
    <replace file="${html.dir}/${html.name}" token="$dateYear$" value="${today.year}"/>
  </target>

  <target name="generate" description="Generate the specification"
	    depends="generate-schema-archives,validate-tt-specs,html,kwexpand">
  </target>

  <target name="sg" description="Shortened generation of the specification, but without rebuilding escapes and expanding keywords."
	    depends="generate-schema-archives,validate-tt-specs-dont-build-escapes,html">
  </target>

  <target name="rg" description="Regenerate using shortened generation and expands keywords."
            depends="sg, kwexpand">
  </target>
  
  <target name="build" description="Build the specification for publication" depends="generate">
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${build.dir}"/>
    </delete>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/images"/>
    <mkdir dir="${build.dir}/rnc"/>
    <mkdir dir="${build.dir}/xsd"/>
    <copy file="${html.dir}/${html.name}" tofile="${build.dir}/index.html"/>
    <copy todir="${build.dir}/images">
      <fileset dir="${basedir}/images" includes="*.png"/>
    </copy>
    <copy file="${rnc.dir}/schema.zip" todir="${build.dir}/rnc"/>
    <copy file="${xsd.dir}/schema.zip" todir="${build.dir}/xsd"/>
  </target>
  
  
  <!-- DO NOT USE AS-IS -->
  <property name="per.name" value="PER-ttaf1-dfxp-20130709"/>
  <property name="per.target" value="${basedir}/${per.name}"/>
  <target name="per-archive" description="Create PER Archive">
    <fail>
      <condition>
        <not>
          <resourcecount count="1">
            <fileset dir="." includes="${per.name}.html"/>
          </resourcecount>
        </not>
      </condition>
    </fail>
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${per.target}"/>
    </delete>
    <mkdir dir="${per.target}"/>
    <mkdir dir="${per.target}/images"/>
    <mkdir dir="${per.target}/rnc"/>
    <mkdir dir="${per.target}/xsd"/>
    <copy file="${per.name}.html" tofile="${per.target}/${per.name}.html"/>
    <copy todir="${per.target}/images">
      <fileset dir="${basedir}/images" includes="*.png"/>
    </copy>
    <copy file="${rnc.dir}/schema.zip" todir="${per.target}/rnc"/>
    <copy file="${xsd.dir}/schema.zip" todir="${per.target}/xsd"/>
    <zip destfile="${per.name}.zip">
      <fileset dir="${per.target}">
        <include name="**/*"/>
      </fileset>
    </zip>
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${per.target}"/>
    </delete>
  </target>

  <!-- DO NOT USE AS-IS -->
  <property name="rec.shortname" value="ttml1"/>
  <property name="rec.name" value="REC-${rec.shortname}-20130924"/>
  <property name="rec.target" value="${basedir}/${rec.name}"/>
  <target name="rec-archive" description="Create REC Archive">
    <fail>
      <condition>
        <not>
          <resourcecount count="1">
            <fileset dir="." includes="${rec.shortname}.html"/>
          </resourcecount>
        </not>
      </condition>
    </fail>
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${rec.target}"/>
    </delete>
    <mkdir dir="${rec.target}"/>
    <mkdir dir="${rec.target}/images"/>
    <mkdir dir="${rec.target}/rnc"/>
    <mkdir dir="${rec.target}/xsd"/>
    <copy file="${rec.shortname}.html" tofile="${rec.target}/${rec.name}.html"/>
    <copy file="${rec.shortname}-changes.html" tofile="${rec.target}/${rec.shortname}-changes.html"/>
    <copy file="${rec.shortname}-errata.html" tofile="${rec.target}/${rec.shortname}-errata.html"/>
    <copy todir="${rec.target}/images">
      <fileset dir="${basedir}/images" includes="*.png"/>
    </copy>
    <copy file="${rnc.dir}/schema.zip" todir="${rec.target}/rnc"/>
    <copy file="${xsd.dir}/schema.zip" todir="${rec.target}/xsd"/>
    <zip destfile="${rec.name}.zip">
      <fileset dir="${rec.target}">
        <include name="**/*"/>
      </fileset>
    </zip>
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${rec.target}"/>
    </delete>
  </target>

</project>
